ptitle Multi-Purpose Maps
phead 1 Multi-Purpose Maps:<br>Structures, Traits, and Higher-Order Functions
pnav 02.html 04.html
This section covers creating and using structs in Rust, making use of higher order functions and traits to create generic functions.  We also introduce tasks, Rust's way of handling multiprocessing, and a simple mechanism for communicating between tasks.  In the following section, we'll cover some of the richer cross-task communication abstractions provided by Rust. 

As a running example, we will use these concepts to build a structure for a simple linked list, a map function which will apply a given function to all elements in the list, and finally use of tasks to make our simple map execute in parallel.

phead 2 Structures
A 
scode
struct
edoc
 is Rust's way of packaging data into a structure. It is similar to 
scode
struct
edoc
 in C. 

phead 3 Defining Structs

A 
scode
struct
edoc
type is defined using:
scode False {'lang': 'rust'}
codeb
struct Name { 
   field1: T1, 
   field2: T2, 
   ... 
}
bedoc
where
scode
T1
edoc
 and 
scode
T2
edoc
 are the types of the preceding fields. 

Note that mutability is not specified in the 
scode
struct
edoc
 type definition. A 
scode
struct 
edoc
 is declared mutable upon creation, and mutability applied to all fields within. 

The following code defines a 
scode
Node
edoc
 for a linked list. The field 
scode
val
edoc
 is an integer, and the 
scode
tail
edoc
 field is either a pointer to the next 
scode
Node
edoc
, or 
scode
None
edoc
 for the last 
scode
Node
edoc
 in the list. 
scode False {'lang': 'rust'}
codeb
struct Node {
    val: int,
    tail: Option<~Node>
}
bedoc
The
scode
tail
edoc
 is an 
scode
Option<~Node>
edoc
, so it either points to an owned 
scode
Node
edoc
, or is
scode
None
edoc
 (an empty LinkedList).

The 
scode
type Name = Type;
edoc
construct provides a way to define a new name for a type.  Note that this is just for convenience &mdash; the 
scode
Name
edoc
defined by the 
scode
type
edoc
definition means exactly the same thing to the type checker as the
scode
Type
edoc
it is defined to.  

For example, we can define the
scode
LinkedList 
edoc
 type using:
scode
type
edoc
 keyword. 
scode False {'lang': 'rust'}
codeb
type LinkedList = Option<~Node>;

struct Node {
   val: int,
   tail: LinkedList
}
bedoc

phead 3 Constructing Structs

A 
scode
struct
edoc
 is constructed in a similar syntax to how it was defined, with the name of the 
scode
struct
edoc
 followed by braces with the fields defined using
scode
fieldName:value
edoc
. 

The following code defines one immutable and one mutable 
scode
Node
edoc
: 
scode False {'lang': 'rust'}
codeb
    let node1 = Node {val:10,  tail: None};
    let mut node2 = Node {val: 10, tail: None};
    node2.val = 15; 
bedoc

The mutability qualifier applies all the fields in the struct.  Trying to change a field of 
scode
node1
edoc
 would result in a compiler error.

For an example, the code below creates a list of 
scode
n
edoc
 elements:
scode False {'lang': 'rust'}
codeb
fn construct_list(n: int, x: int) -> LinkedList {
    match n {
        0 => { None }
        _ => { Some(~Node{val: x, tail: construct_list(n - 1, x + 1)}) }
    }
}
bedoc

(See the <a href="http://static.rust-lang.org/doc/master/tutorial.html#implementing-a-linked-list">official Rust tutorial</a> for a more elegant way to implement a linked list in Rust using an 
scode
enum
edoc
, which we don't cover in this tutorial.)

phead 2 Traits

<em>Traits</em> provide a way of defining a set of methods.  The thing
in Java they most closely resemble is interfaces, but traits in Rust can
also include implementations of methods.

phead 3 Defining Traits
The syntax for defining a trait is similar to that for a struct:
scode False {'lang': 'rust'}
codeb
trait Name {
   method1;
   method2;
   ...
}
bedoc
Each method is a function type declaration.  

For example, we can define a Length trait like this:
scode False {'lang': 'rust'}
codeb
trait Length {
   fn length(&self) -> int;
}
bedoc
The function declaration uses
scode
&self
edoc
as the parameter to indicate the object on which length is invoked (similar to how <tt>this</tt> is used in Java).  Note that it does not have a type yet, since we can implement a trait for different types.

phead 3 Implementing Traits

The 
scode
impl
edoc
construct is used to implement a trait for a type.  For example,

scode False {'lang': 'rust'}
codeb
impl Length for LinkedList {
   fn length(&self) -> int {
      match self {
        &Some(ref node) => { 1 + node.tail.length() }
        &None => 0
      }
   }
}
bedoc
implements the 
scode
Length
edoc
trait for our
scode
LinkedList
edoc
type by providing an implementation of the
scode
length
edoc
method.  We need the
scode
ref
edoc
 qualified for the matched variable. This indicated that is it bound by reference rather than by value. 

We'll see a more interesting example of implementing a trait for the linked list type at the end of this part of the tutorial.

<div class="exercise">
<b>Exercise 3.1.</b> Define a 
scode
Tree
edoc
type that can be used to represent a tree where each node has an 
scode
int
edoc
value and a vector of children nodes.
</div>

<div class="exercise">
<b>Exercise 3.2.</b> Define a 
scode
ToString
edoc
trait that provides a method,
scode
fn to_string(&self) -> ~str
edoc
for producing a string representation of an object.  Implement the
scode
ToString
edoc
trait for both the example
scode
LinkedList
edoc
type and your 
scode
Tree
edoc
type from the previous exercise.  (Note that Rust already defines a 
scode
ToStr
edoc 
trait similar to the 
scode
ToString
edoc
trait here.)
</div>

phead 2 Higher-Order Functions

A higher-order function is a function which operates on other functions.
We can have functions that take other functions as inputs, as well as
functions that create and return new functions as their output.
Higher-order functions provide a lot of power for concisely and very
generally describe computations.  By the end of this section, you'll be
able to write a single function that can do all of the things in the
previous set of exercises!

phead 3 Functions as Parameters

A parameter can have function type, just like any other type.  The type
of a function includes the types of its inputs and the type of its output.  

For example, 
scode False {'lang': 'rust'}
codeb
fn twice(n: int, f: |int| -> int) -> int {
    f(f(n))
}
bedoc
defines a function that takes two inputs, the second of which is a function.  The syntax, 
scode
|arg1, arg2, ...| -> res
edoc
(with vertical bars around a list of parameter types) specifies a function that takes the 
scode
argn
edoc
types as inputs and returns a value of type
scode
res
edoc
.

Here's an example using 
scode
twice
edoc
:

scode False {'lang': 'rust'}
codeb
fn successor(n: int) -> int { n + 1 }
fn double(n:int) -> int { n * 2 }

fn main()
{
    println!("Result: {:d}", twice(twice(1, successor), double));
}
bedoc
The result is (((1 + 1) + 1) * 2) * 2 = 12.

phead 3 Functions as Results

It would be a lot more useful if 
scode
twice
edoc
didn't take the integer as one of its inputs, but instead returned a function.  For example, we would like to be able to do:
scode False {'lang': 'rust'}
codeb
    let square = twice(double);
bedoc
to define a squaring function.  

We can do this by defining a function that returns a function:
scode False {'lang': 'rust'}
codeb
fn twice(f: proc(int) -> int) -> (proc(int) -> int) {
    proc(n: int) { f(f(n)) }
}
bedoc

Now, 
scode
twice
edoc
is a function that take a function as its input (we use 
scode
proc(int) -> int
edoc
here to describe the input function, and need to use 
scode
proc(int) ->int
edoc
instead of
scode
|int| -> int
edoc
because of Rust's lifetime rules.   (Note that the way we defined this, we can only use the returned function once.)  

We can use
scode
twice
edoc
like this:
scode False {'lang': 'rust'}
codeb
fn main()
{
    let hexaple = twice(twice(double));
    println!("Result: {:d}", hexaple(2)); // 32
}
bedoc

<div class="exercise">
<b>Exercise 3.3.</b>  Define a 
scode
compose
edoc
function that takes as inputs two functions and outputs a function that composes the two input functions.  Both of the input functions and the returned function should have type
scode
proc(int) -> int
edoc
.  You should be able to use your
scode
compose
edoc
function to define
scode
   let sixthpower = compose(cube, square)
edoc
where 
scode
cube
edoc
and
scode
square
edoc
are functions that compute the cube and square of an int input respectively.
</div>

<div class="exercise">
<b>Exercise 3.4.</b>

</div>

phead 2 Example: Mapping a List

The above examples hopefully give you a sense of the power of
higher-order functions, but perhaps not how they would be useful in
typical code.  Next, we'll see how higher-order functions can be used to
provide generic functions for manipulating our 
scode
LinkedList 
edoc
type.  We'll implement a mapping function that applies a function to each element of a list.

We define the Map trait as:
scode False {'lang': 'rust'}
codeb
trait Map {
   fn mapr(&mut self, extern fn(int) -> int);
}
bedoc

Now, we will implement the 
scode
Map 
edoc
 trait for our 
scode
LinkedList
edoc
type:
scode False {'lang': 'rust'}
codeb
impl Map for LinkedList {
    fn mapr(&mut self, f: extern fn(int) -> int) {
         match(*self) {
            None => { }
            Some(ref mut current) => { 
               current.val = f(current.val);
               current.tail.mapr(f); 
            }
        } 
    } 
}
bedoc

Here are some examples using map:
scode False {'lang': 'rust'}
codeb
fn inc(n: int) -> int { n + 1 }
fn double(n: int) -> int { n * 2 }

fn main() {
    let mut l10: LinkedList = construct_list(4, 10);
    l10.mapr(inc);
    l10.mapr(double);
    println!("List: {:s}", print_list(l10.clone())); // 22, 24, 26, 28,
}
bedoc

<div class="exercise">
<b>Exercise 3.5.</b> 

</div>

<div class="exercise">
<b>Exercise 3.6.</b> 

</div>

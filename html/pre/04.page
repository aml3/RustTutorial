ptitle Tasks
phead 1 Tasks and Communication
pnav 03.html 05.html
phead 2 Task Properties

Rust is described by the developers as a language that concentrates on,
amoung other things, safety and concurrency. In order to ensure safe,
cocurrent computation, Rust makes use of <em>tasks</em>.

A Rust task is an abstraction that has its own memory space and
registers, like a process, but doesn't have a processes' associated
operating system cost. Tasks split computation like threads, however do
not share memory, thus preventing implicit data races and other
perplexing bugs that occur when multiple threads access and modify the
same data.

phead 3 Spawning a Task
Tasks are created using the 
scode
spawn(fn())
edoc
 function, which creates a new task and executs the input function, 
scode
fn()
edoc
 in that task.  After the function completes, the task is terminated. 

Another way to do this is with the 
scode
do
edoc
 construct. The 
scode False {'lang': 'rust'}
codeb
do expr { block }
bedoc
constract is syntactic sugar for 
scode False {'lang': 'rust'}
codeb
expr(proc() { block })
bedoc
so, 
scode False {'lang': 'rust'}
codeb
do spawn { a; }
bedoc
is the same as:
scode False {'lang': 'rust'}
codeb
spawn(proc() { a; })
bedoc
<b>Note:</b> there are <a href="https://github.com/mozilla/rust/issues/10815">plans to remove 
do</a> from upcoming versions of Rust, so we don't recommend using it, but since you will see it in lots of example code still describe it here.

Here's an example program that spawns tasks:
scode False {'lang': 'rust'}
codeb
fn count(m: &str, n: int) {
    for i in range(1, n) {
        println!("{:s}{:d}", m, i); 
    }
}

fn main() {
    spawn(proc() { count("A", 10); });
    spawn(proc() { count("B", 10); });
    spawn(proc() { count("C", 10); });
}
bedoc
If you try running this, you will see something like:
<pre>
B1
C1
A1
C2
B2
A2
B3
...
</pre>
where the events from the three tasks are interleaved.  (Try changing the 
scode
println!
edoc
to a 
scode
print!
edoc
and see how that impacts the amount of interleaving you see.)


phead 3 Task Communication

Tasks do not share memory, and each task has its own memory space. The
tasks all run in the same process, though, the memory isloation is
provided by the Rust compiler and run-time, not by the operating system
with hardware support as is done for an OS process.

Spawning a task and then trying to access mutable variables from outside
the scope of the task itself will result in a compiler error.  For example,
scode False {'lang': 'rust'}
codeb
...
fn main() {
    let n = 10;
    spawn(proc() { count("A", n); });
    spawn(proc() { count("B", n); });
    spawn(proc() { count("C", n); });
}
bedoc
is okay since
scode
n
edoc
is declared as immutable.  But if we change the code to,
scode False {'lang': 'rust'}
codeb
fn main() {
    let mut n = 10;
    spawn(proc() { count("A", n); });
    ...
bedoc
the compiler will disallow the code with this error:
<pre><code>sharing.rs:9:31: 9:32 <span style="color:red;">error: mutable variables cannot be implicitly captured</span>
sharing.rs:9     spawn(proc() { count("A", n); });
</code></pre>
The problem is mutable data cannot be shared across tasks, since this
could lead to dangerous and difficult to find bugs.  Instead, we need to make all communication between tasks explicit.

phead 4 Ports and Channels

This is accomplished through the use of
scode
Port<T>
edoc
 and 
scode
Chan<T>
edoc
 objects. These can be thought of as a link between a spawned task and its parent (the task which spawned it). 

A Port/Chan pair is created as a tuple, as demonstrated in the code below. The type of 
scode
<T>
edoc
 is unrestricted, however the 
scode
Port
edoc
 and 
scode
Chan
edoc
 must have matching types.

The transfer of values between tasks is accomplished with the 
scode
Chan.send(T)
edoc
 function, which puts a value into the 
scode
(Port<T>, Chan<T>)
edoc
 pair, and the 
scode
Port.recv()
edoc
 function, which returns the value that had been sent by the 
scode
Chan
edoc
. 

The following spawns a very simple task to call our 
scode
plustwo
edoc
 function, and then send the result back to the parent thread.
scode False {'lang': 'rust'}
codeb
   let (port, chan): (Port<int>, Chan<int>) = Chan::new();
   spawn(proc() {
        let x = 10;
        chan.send(plustwo(x));
    });
    let new_x = port.recv(); // new_x == 12
bedoc

A
scode
(Port<T>, Chan<T>)
edoc
 pair can only be sent to from a single task. Once 
scode
Chan.send(T)
edoc
 has been called from a specific task, that task owns the channel. Trying to call 
scode
Chan.send(T)
edoc
 from multiple tasks will result in a compile time error. Thus, to send objects back and forth between tasks, two different channels are necessary. 

<!--
The following example does the same as the previous, but receives the value for 
scode
plustwo
edoc
 from the parent task, instead of creating it within the spawned task.
scode False {'lang': 'rust'}
codeb
    let (port1, chan1): (Port<int>, Chan<int>) = Chan::new();
    let (port2, chan2): (Port<int>, Chan<int>) = Chan::new();
    do spawn {
        let x = port2.recv();
        chan1.send(plustwo(x));
    }
    chan2.send(10);
    let new_x = port1.recv(); //new_x == 12
bedoc
-->

Recieving is synchronous.  So, once 
scode
Port.recv()
edoc
 has been called, the task that called it will not continue until a value is sent. 

This can lead to deadlocking programs.  For example, if a 
scode
Port.recv()
edoc
 is waiting on a send from another task, but that other task is waiting to receive something from the original task, neither task can make progress.

phead 2 Multi-Tasking Map

To put everything together, we modify the mapping code from the last
part to update each element in a separate task.  If the computation
needed to produce each new value is expensive, this will potentially
divide the mapping time by the number of cores available (with some
overhead for spawning the tasks and the communication channels).

Try running the code below, and see if you can figure out why the order
of the statements in the mapr function matters.

scode False {'lang': 'rust'}
codeb
type LinkedList = Option<~Node>;

struct Node {
   val: int,
   tail: LinkedList
}

fn construct_list(n: int, x: int) -> LinkedList {
    match n {
        0 => { None }
        _ => { Some(~Node{val: x, tail: construct_list(n - 1, x + 1)}) }
    }
}

fn print_list(p: LinkedList) -> ~str {
    match p {
        None => { ~"" }
        Some(node) => { node.val.to_str() + ", " 
                        + print_list(node.tail) }
    }
}

trait Map {
   fn mapr(&mut self, fn(int) -> int);
}

impl Map for LinkedList {
    fn mapr(&mut self, f: fn(int) -> int) {
         match(*self) {
            None => { }
            Some(ref mut current) => { 
               let (port, chan) : (Port<int>, Chan<int>) = Chan::new();
               let val = current.val; // Can't capture current
               spawn(proc() { chan.send(f(val)); });
               current.tail.mapr(f); // why here?
               current.val = port.recv();
            }
        } 
    } 
}

fn expensive_inc(n: int) -> int { 
   let mut a = 1;
   println!("starting inc: {:d}", n);
   for _ in range(0, 10000) {
        for _ in range(0, 1000000) {
           a = a + 1;
        }
   }
   
   println!("finished inc: {:d} ({:d})", n, a);
   n + 1 
}

fn main() {
    let mut p : LinkedList = construct_list(5, 10);
    p.mapr(expensive_inc);
    println!("List: {:s}", print_list(p.clone()));
}
bedoc
 
